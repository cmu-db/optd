data Logical =
    | Add(left: Logical, right: Logical)
    | List(bla: [Logical])
    \ Const(val: I64)

data Physical
data LogicalProperties
data PhysicalProperties

fn (log: Logical) fold = x -> x

fn arr_as_function(other: Logical, idx: I64, closure: I64 -> Logical?) = closure(idx)

fn main(log: Logical): Logical? = match log 
    | Add(Add(_, _), right: Const(val)) -> {
        let closure = x -> right in
        closure(5)
    }
    | fooo -> arr_as_function(fooo, 0, [log])
    | List(bla) -> match bla
        | vla -> vla(0)
        \ [] -> none
    | Add(left, right) -> left
    \ _ -> fail("brru")

fn (log: [Logical]) vla: [Logical] = match log 
    \ [Const(5) .. [List([Const(5) .. _]) .. v]] -> v
