data PhysicalProperties
data Statistics
// Taking folded here is not the most interesting property,
// but it ensures they are the same for all expressions in the same group.
data LogicalProperties(folded: I64)

data Logical =
  | Add(left: Logical, right: Logical)
  | Sub(left: Logical, right: Logical)
  | Mult(left: Logical, right: Logical)
  | Div(left: Logical, right: Logical)
  \ Const(val: I64)

data Physical =
  | PhysicalAdd(left: Physical, right: Physical)
  | PhysicalSub(left: Physical, right: Physical)
  | PhysicalMult(left: Physical, right: Physical)
  | PhysicalDiv(left: Physical, right: Physical)
  \ PhysicalConst(val: I64)

// This will be the input plan that will be optimized.
// Result is: ((1 - 2) * (3 / 4)) + ((5 - 6) * (7 / 8)) = 0
fn input(): Logical = 
    Add(
        Mult(
            Sub(Const(1), Const(2)),
            Div(Const(3), Const(4))
        ),
        Mult(
            Sub(Const(1), Const(2)),
            Div(Const(7), Const(8))
        )
    )

// External function to allow the retrieval of properties.
fn properties(op: Logical*): LogicalProperties

// FIXME: This should be $ really (or other), make costing and derive consistent with each other.
// Also, be careful of not forking in there! And make it a required function in analyzer.
fn derive(op: Logical*) = match op
  | Add(left, right) -> 
      LogicalProperties(left.properties()#folded + right.properties()#folded)
  | Sub(left, right) ->
      LogicalProperties(left.properties()#folded - right.properties()#folded)
  | Mult(left, right) ->
      LogicalProperties(left.properties()#folded * right.properties()#folded)
  | Div(left, right) ->
      LogicalProperties(left.properties()#folded / right.properties()#folded)
  \ Const(val) -> LogicalProperties(val)

[transformation]
fn (op: Logical*) mult_commute(): Logical? = match op
  | Mult(left, right) -> Mult(right, left)
  \ _ -> none

[transformation]
fn (op: Logical*) add_commute(): Logical? = match op
  | Add(left, right) -> Add(right, left)
  \ _ -> none

[transformation]
fn (op: Logical*) const_fold_add(): Logical? = match op
  | Add(Const(a), Const(b)) -> Const(a + b)
  \ _ -> none

[transformation]
fn (op: Logical*) const_fold_mult(): Logical? = match op
  | Mult(Const(a), Const(b)) -> Const(a * b)
  \ _ -> none

[transformation]
fn (op: Logical*) const_fold_sub(): Logical? = match op
  | Sub(Const(a), Const(b)) -> Const(a - b)
  \ _ -> none

[transformation]
fn (op: Logical*) const_fold_div(): Logical? = match op
  | Div(Const(a), Const(b)) -> 
      if b == 0 then none else Const(a / b)
  \ _ -> none

[implementation]
fn (op: Logical*) to_physical(props: PhysicalProperties?) = match op
  | Add(left, right) -> PhysicalAdd(left.to_physical(props), right.to_physical(props))
  | Sub(left, right) -> PhysicalSub(left.to_physical(props), right.to_physical(props))
  | Mult(left, right) -> PhysicalMult(left.to_physical(props), right.to_physical(props))
  | Div(left, right) -> PhysicalDiv(left.to_physical(props), right.to_physical(props))
  \ Const(val) -> PhysicalConst(val)