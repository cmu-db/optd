data LogicalProps(schema_len: I64)

data Scalar =
    | ColumnRef(idx: I64)
    | Literal =
        | IntLiteral(value: I64)
        | StringLiteral(value: String)
        | BoolLiteral(value: Bool)
        \ NullLiteral
    | Arithmetic =
        | Mult(left: Scalar, right: Scalar)
        | Add(left: Scalar, right: Scalar)
        | Sub(left: Scalar, right: Scalar)
        \ Div(left: Scalar, right: Scalar)
    | Predicate =
        | And(children: [Predicate])
        | Or(children: [Predicate])
        | Not(child: Predicate)
        | Equals(left: Scalar, right: Scalar)
        | NotEquals(left: Scalar, right: Scalar)
        | LessThan(left: Scalar, right: Scalar)
        | LessThanEqual(left: Scalar, right: Scalar)
        | GreaterThan(left: Scalar, right: Scalar)
        | GreaterThanEqual(left: Scalar, right: Scalar)
        | IsNull(expr: Scalar)
        \ IsNotNull(expr: Scalar)
    | Function =
        | Cast(expr: Scalar, target_type: String)
        | Substring(str: Scalar, start: Scalar, length: Scalar)
        \ Concat(args: [Scalar])
    \ AggregateExpr =
        | Sum(expr: Scalar)
        | Count(expr: Scalar)
        | Min(expr: Scalar)
        | Max(expr: Scalar)
        \ Avg(expr: Scalar)

data Logical =
    | Scan(table_name: String)
    | Filter(child: Logical, cond: Predicate)
    | Project(child: Logical, exprs: [Scalar])
    | Join(
          left: Logical,
          right: Logical,
          typ: JoinType,
          cond: Predicate
      )
    \ Aggregate(
          child: Logical,
          group_by: [Scalar],
          aggregates: [AggregateExpr]
      )

data Physical =
    | Scan(table_name: String)
    | Filter(child: Physical, cond: Predicate)
    | Project(child: Physical, exprs: [Scalar])
    | Join =
        | HashJoin(
              build_side: Physical,
              probe_side: Physical,
              typ: String,
              cond: Predicate
          )
        | MergeJoin(
              left: Physical,
              right: Physical,
              typ: String,
              cond: Predicate
          )
        \ NestedLoopJoin(
              outer: Physical,
              inner: Physical,
              typ: String,
              cond: Predicate
          )
    | Aggregate(
          child: Physical,
          group_by: [Scalar],
          aggregates: [AggregateExpr]
      )
    \ Sort(
          child: Physical,
          order_by: [(Scalar, SortOrder)]
      )

data JoinType =
    | Inner
    | Left
    | Right
    | Full
    \ Semi

[rust]
fn (expr: Scalar) apply_children(f: Scalar -> Scalar) = None

fn (pred: Predicate) remap(map: {I64 : I64}) =
    match predicate
        | ColumnRef(idx) -> ColumnRef(map(idx))
        \ _ -> predicate.apply_children(child -> rewrite_column_refs(child, map))
    
[rule]
fn (expr: Logical) join_commute: Logical? = match expr
    \ Join(left, right, Inner, cond) ->
        let 
            right_indices = 0.right.schema_len,
            left_indices = 0..left.schema_len,
            remapping = left_indices.map(i -> (i, i + right_len)) ++ 
                right_indices.map(i -> (left_len + i, i)).to_map,
        in
            Project(
                Join(right, left, Inner, cond.remap(remapping)),
                right_indices.map(i -> ColumnRef(i)).to_array
            )