
data Bla(vla: Vla)
data Vla(foo: Foo)
data Foo(bla: Bla)

data JoinType =
    | Inner
    | Left
    | Right
    | Full
    \ Semi

fn <K, V> map_get(map: {K: V}, key: K): V = None

fn rewrite_column_refs(): V

fn (log: Logical*) schema_len: I64 
fn <A, B> (a: A) map(lambda: A -> B): B 

[rust]
fn (expr: Scalar) apply_children(f: Scalar -> Scalar) = None

fn (pred: Predicate) remap(map: {I64 : I64}) =
    match pred
        | ColumnRef(idx) -> ColumnRef(map(idx))
        \ _ -> pred.apply_children(child -> rewrite_column_refs(child, map))
    
[rule]
fn (expr: Logical*) join_commute: Logical? = match expr
    \ Join(left, right, Inner, cond) ->
        let 
            right_indices = 0..right.schema_len(),
            left_indices = 0..left.schema_len(),
            remapping = left_indices.map(i -> (i, i + right.schema_len())) ++ 
                right_indices.map(i -> (left.schema_len() + i, i)),
        in
            Project(
                Join(right, left, Inner, cond.remap(remapping)),
                right_indices.map(i -> ColumnRef(i))
            )