use std::sync::Arc;

use crate::ir::{
    operators::{Child, OperatorData},
    plans::{PartialLogicalPlan, PartialPhysicalPlan, PartialScalarPlan, ScalarPlan},
    properties::PropertiesData,
};
use optd_dsl::analyzer::hir::{
    CoreData, Literal, LogicalOperator, Materializable, PhysicalOperator, Value,
};

use CoreData::*;
use Literal::*;
use Materializable::*;

//=============================================================================
// Main conversion functions
//=============================================================================

/// Converts a PartialLogicalPlan into a HIR Value representation.
///
/// This function transforms the optimizer's intermediate representation of a logical
/// operator into the DSL's internal representation, allowing the DSL to work with
/// plans generated by the optimizer.
///
/// # Parameters
/// * `plan` - The PartialLogicalPlan to convert
///
/// # Returns
/// A HIR Value representation of the input plan
pub(crate) fn partial_logical_to_value(plan: &PartialLogicalPlan) -> Value {
    match plan {
        PartialLogicalPlan::UnMaterialized(group_id) => {
            Value(LogicalOperator(UnMaterialized(group_id.0)))
        }
        PartialLogicalPlan::PartialMaterialized { node } => {
            Value(LogicalOperator(Materialized(LogicalOperator {
                tag: node.tag.clone(),
                data: convert_operator_data_to_values(&node.data),
                relational_children: convert_children_to_values(
                    &node.relational_children,
                    partial_logical_to_value,
                ),
                scalar_children: convert_children_to_values(
                    &node.scalar_children,
                    partial_scalar_to_value,
                ),
            })))
        }
    }
}

/// Converts a PartialScalarPlan into a HIR Value representation.
///
/// This function transforms the optimizer's intermediate representation of a scalar
/// operator into the DSL's internal representation.
///
/// # Parameters
/// * `plan` - The PartialScalarPlan to convert
///
/// # Returns
/// A HIR Value representation of the input plan
pub(crate) fn partial_scalar_to_value(plan: &PartialScalarPlan) -> Value {
    match plan {
        PartialScalarPlan::UnMaterialized(group_id) => {
            Value(ScalarOperator(UnMaterialized(group_id.0)))
        }
        PartialScalarPlan::PartialMaterialized { node, .. } => Value(ScalarOperator(Materialized(
            optd_dsl::analyzer::hir::ScalarOperator {
                tag: node.tag.clone(),
                data: convert_operator_data_to_values(&node.data),
                children: convert_children_to_values(&node.children, partial_scalar_to_value),
            },
        ))),
    }
}

/// Converts a ScalarPlan into a HIR Value representation.
///
/// This function transforms a fully materialized scalar plan
/// into the DSL's internal representation.
///
/// # Parameters
/// * `plan` - The ScalarPlan to convert
///
/// # Returns
/// A HIR Value representation of the input plan
fn scalar_to_value(plan: &ScalarPlan) -> Value {
    Value(ScalarOperator(Materialized(
        optd_dsl::analyzer::hir::ScalarOperator {
            tag: plan.node.tag.clone(),
            data: convert_operator_data_to_values(&plan.node.data),
            children: convert_children_to_values(&plan.node.children, scalar_to_value),
        },
    )))
}

/// Converts a PartialPhysicalPlan into a HIR Value representation.
///
/// This function transforms the optimizer's intermediate representation of a physical
/// operator into the DSL's internal representation.
///
/// # Parameters
/// * `plan` - The PartialPhysicalPlan to convert
///
/// # Returns
/// A HIR Value representation of the input plan
pub(crate) fn partial_physical_to_value(plan: &PartialPhysicalPlan) -> Value {
    match plan {
        PartialPhysicalPlan::UnMaterialized(goal_id) => {
            Value(PhysicalOperator(UnMaterialized(goal_id.0)))
        }
        PartialPhysicalPlan::PartialMaterialized {
            node,
            properties,
            group_id,
        } => Value(PhysicalOperator(Materialized(PhysicalOperator {
            tag: node.tag.clone(),
            data: convert_operator_data_to_values(&node.data),
            relational_children: convert_children_to_values(
                &node.relational_children,
                partial_physical_to_value,
            ),
            scalar_children: convert_children_to_values(
                &node.scalar_children,
                partial_scalar_to_value,
            ),
            group_id: group_id.0,
            properties: properties_data_to_value(&properties.0).into(),
        }))),
    }
}

//=============================================================================
// Generic conversion helpers
//=============================================================================

/// Generic function to convert a Vec of Children to Vec of Values.
///
/// This function provides a generic way to convert IR Child structures
/// to HIR Values for any type that can be converted using a converter function.
///
/// # Type Parameters
/// * `T` - The source type which is wrapped in Arc<T> inside Child<Arc<T>>
///
/// # Parameters
/// * `children` - The slice of Children to convert
/// * `converter` - A function that converts a single T to Value
///
/// # Returns
/// A Vec of Values representing the converted children
fn convert_children_to_values<T, F>(children: &[Child<Arc<T>>], converter: F) -> Vec<Value>
where
    F: Fn(&T) -> Value,
    T: 'static,
{
    children
        .iter()
        .map(|child| match child {
            Child::Singleton(item) => converter(&*item),
            Child::VarLength(items) => {
                Value(Array(items.iter().map(|item| converter(&*item)).collect()))
            }
        })
        .collect()
}

/// Converts a slice of OperatorData to a Vec of HIR Values.
///
/// This function maps each OperatorData to its corresponding HIR Value representation.
///
/// # Parameters
/// * `data` - The slice of OperatorData to convert
///
/// # Returns
/// A Vec of Values representing the converted data
fn convert_operator_data_to_values(data: &[OperatorData]) -> Vec<Value> {
    data.iter().map(operator_data_to_value).collect()
}

/// Converts a slice of PropertiesData to a Vec of HIR Values.
///
/// This function maps each PropertiesData to its corresponding HIR Value representation.
///
/// # Parameters
/// * `data` - The slice of PropertiesData to convert
///
/// # Returns
/// A Vec of Values representing the converted properties
fn convert_properties_data_to_values(data: &[PropertiesData]) -> Vec<Value> {
    data.iter().map(properties_data_to_value).collect()
}

//=============================================================================
// Data conversion functions
//=============================================================================

/// Converts an OperatorData to a HIR Value representation.
///
/// # Parameters
/// * `data` - The OperatorData to convert
///
/// # Returns
/// A HIR Value representation of the input data
fn operator_data_to_value(data: &OperatorData) -> Value {
    match data {
        OperatorData::Int64(i) => Value(Literal(Int64(*i))),
        OperatorData::Float64(f) => Value(Literal(Float64(**f))),
        OperatorData::String(s) => Value(Literal(String(s.clone()))),
        OperatorData::Bool(b) => Value(Literal(Bool(*b))),
        OperatorData::Struct(name, elements) => Value(Struct(
            name.clone(),
            convert_operator_data_to_values(elements),
        )),
        OperatorData::Array(elements) => Value(Array(convert_operator_data_to_values(elements))),
    }
}

/// Converts a PropertiesData to a HIR Value representation.
///
/// # Parameters
/// * `data` - The PropertiesData to convert
///
/// # Returns
/// A HIR Value representation of the input properties data
fn properties_data_to_value(data: &PropertiesData) -> Value {
    match data {
        PropertiesData::Int64(i) => Value(Literal(Int64(*i))),
        PropertiesData::Float64(f) => Value(Literal(Float64(**f))),
        PropertiesData::String(s) => Value(Literal(String(s.clone()))),
        PropertiesData::Bool(b) => Value(Literal(Bool(*b))),
        PropertiesData::Struct(name, elements) => Value(Struct(
            name.clone(),
            convert_properties_data_to_values(elements),
        )),
        PropertiesData::Array(elements) => Value(Array(
            elements.iter().map(properties_data_to_value).collect(),
        )),
        PropertiesData::Scalar(scalar) => scalar_to_value(scalar),
    }
}
